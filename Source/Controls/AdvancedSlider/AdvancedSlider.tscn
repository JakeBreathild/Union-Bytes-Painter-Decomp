[gd_scene load_steps=5 format=2]

[ext_resource path="res://Resources/Themes/Theme.theme" type="Theme" id=2]
[ext_resource path="res://Resources/Fonts/Slider.tres" type="DynamicFont" id=3]

[sub_resource type="CSharpScript" id=1]
script/source = "using Godot;
using System;

public class AdvancedSlider : Panel
{
    private Label nameLabel = null;
    public Label NameLabel { get => nameLabel; }

    private Slider slider = null;
    public Slider Slider { get => slider; }

    private LineEdit valueLineEdit = null;
    public LineEdit ValueLineEdit { get => valueLineEdit; }

    private MenuButton menuButton = null;
    private PopupMenu popupMenu = null;

    [Export] private Color defaultColor = new Color(0.81f, 0.81f, 0.81f);
    [Export] private Color disabledColor = new Color(1.0f, 1.0f, 1.0f, 0.35f);

    [Export] private string name = \"\";
    [Export] private string valueFormat = \"0.0\";
    [Export] private float minValue = 0.0f;
    public float MinValue
    {
        get => minValue;
        set 
        {
            minValue = value;
            slider.MinValue = minValue;
            if (this.value < minValue)
                Value = minValue;
        }
    }

    [Export] private float maxValue = 100.0f;
    public float MaxValue
    {
        get => maxValue;
        set
        {
            maxValue = value;
            slider.MaxValue = maxValue;
            if (this.value > maxValue)
                Value = maxValue;
        }
    }


    [Export] private float step = 1.0f;
    [Export] private bool rounded = false;

    [Export] private float value = 0.0f;
    public float Value
    {
        get => value;
        set
        {
            this.value = value;
            slider.SetBlockSignals(true);
            valueLineEdit.SetBlockSignals(true);
            slider.Value = this.value;
            valueLineEdit.Text = this.value.ToString(valueFormat);
            valueLineEdit.SetBlockSignals(false);
            slider.SetBlockSignals(false);
        }
    }

    public int IntValue
    {
        get => Mathf.RoundToInt(value);
        set
        {
            this.value = value;
            slider.SetBlockSignals(true);
            valueLineEdit.SetBlockSignals(true);
            slider.Value = this.value;
            valueLineEdit.Text = this.value.ToString(valueFormat);
            valueLineEdit.SetBlockSignals(false);
            slider.SetBlockSignals(false);
        }
    }

    private float defaultValue = 0.0f;
    public float DefaultValue { get => defaultValue; set => defaultValue = value; }
    public int DefaultIntValue { get => Mathf.RoundToInt(defaultValue); set => defaultValue = value; }



    [Export] private bool disabled = false;
    public bool Disabled
    {
        get => disabled;
        set
        {
            disabled = value;
            slider.Editable = !disabled;
            valueLineEdit.Editable = !disabled;
            menuButton.Disabled = disabled;
            if (disabled)
                nameLabel.AddColorOverride(\"font_color\", disabledColor);
            else
                nameLabel.AddColorOverride(\"font_color\", defaultColor);
        }
    }

    private Action<float> valueChangedCallback = null;
    public Action<float> ValueChangedCallback { set => valueChangedCallback = value; }



    /// Godot ///

    public override void _Ready()
    {
        defaultValue = value;

        nameLabel = GetNodeOrNull<Label>(\"Name\");
        nameLabel.Text = Tr(name);
        if (disabled)
            nameLabel.AddColorOverride(\"font_color\", disabledColor);
        else
            nameLabel.AddColorOverride(\"font_color\", defaultColor);

        slider = GetNodeOrNull<Slider>(\"Slider\");
        slider.MinValue = minValue;
        slider.MaxValue = maxValue;
        slider.Step = step;
        slider.Value = value;
        slider.Rounded = rounded;
        slider.Editable = !disabled;
        slider.Connect(Signals.ValueChanged, this, \"SliderValueChanged\");


        valueLineEdit = GetNodeOrNull<LineEdit>(\"Value\");
        valueLineEdit.Text = value.ToString(valueFormat);
        valueLineEdit.Editable = !disabled;
        valueLineEdit.Connect(Signals.TextEntered, this, \"ValueLineEditTextEntered\");
        valueLineEdit.Connect(Signals.FocusEntered, this, \"ValueLineEditTextEntered\");
        valueLineEdit.Connect(Signals.FocusExited, this, \"ValueLineEditFocusExited\");

        menuButton = GetNodeOrNull<MenuButton>(\"Menu\");
        menuButton.Disabled = disabled;
        popupMenu = menuButton.GetPopup();
        popupMenu.AddFontOverride(\"font\", Resources.DefaultFont);
        popupMenu.AddItem(\"Default\", 0);
        popupMenu.AddItem(\"Min\", 1);
        popupMenu.AddItem(\"1/4\", 2);
        popupMenu.AddItem(\"1/2\", 3);
        popupMenu.AddItem(\"3/4\", 4);
        popupMenu.AddItem(\"Max\", 5);
        popupMenu.Connect(Signals.AboutToShow, this, \"PopupShow\");
        popupMenu.Connect(Signals.Hide, this, \"PopupHide\");
        popupMenu.Connect(Signals.IdPressed, this, \"PopupMenuItemSelected\");
    }



    /// General ///

    public void Reset()
    {
        value = defaultValue;
        ChangeValue(value);
    }


    /// Control ///

    public void PopupShow()
    {
        InputManager.MouseEnteredUserInterface();
    }

    public void PopupHide()
    {
        InputManager.MouseExitedUserInterface();
        InputManager.SkipInput = true;
    }


    /// Callbacks ///


    private void ChangeValue(float value)
    {
        slider.SetBlockSignals(true);
        valueLineEdit.SetBlockSignals(true);

        this.value = value;
        slider.Value = this.value;
        valueLineEdit.Text = this.value.ToString(valueFormat);

        if (valueChangedCallback != null)
            valueChangedCallback(this.value);

        valueLineEdit.SetBlockSignals(false);
        slider.SetBlockSignals(false);
    }


    public void ValueLineEditTextEntered(string text)
    {
        if (!text.Empty() && text.IsValidFloat())
        {
            value = text.ToFloat();
            if (value < minValue)
                value = minValue;
            else if (value > maxValue)
                value = maxValue;
            ChangeValue(value);
            valueLineEdit.ReleaseFocus();
        }
        else
        {
            valueLineEdit.SetBlockSignals(true);
            valueLineEdit.Text = value.ToString(valueFormat);
            valueLineEdit.ReleaseFocus();
            valueLineEdit.SetBlockSignals(false);
        }
    }

    public void SliderValueChanged(float value)
    {
        ChangeValue(value);
    }

    public void PopupMenuItemSelected(int id)
    {
        switch (id)
        {
            case 0:
                ChangeValue(DefaultValue);
                break;

            case 1:
                ChangeValue(minValue);
                break;

            case 2:
                ChangeValue(minValue + (maxValue - minValue) * 0.25f);
                break;

            case 3:
                ChangeValue(minValue + (maxValue - minValue) * 0.50f);
                break;

            case 4:
                ChangeValue(minValue + (maxValue - minValue) * 0.75f);
                break;

            case 5:
                ChangeValue(maxValue);
                break;

        }
    }














}
"

[sub_resource type="StyleBoxFlat" id=2]
bg_color = Color( 0.164706, 0.164706, 0.164706, 1 )
border_color = Color( 0.16, 0.16, 0.16, 1 )
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[node name="AdvancedSlider" type="Panel"]
anchor_right = 1.0
margin_bottom = 36.0
rect_min_size = Vector2( 0, 36 )
mouse_filter = 1
theme = ExtResource( 2 )
script = SubResource( 1 )

[node name="Name" type="Label" parent="."]
anchor_right = 1.0
margin_left = -2.0
margin_top = 2.0
margin_right = -120.0
margin_bottom = 23.0
theme = ExtResource( 2 )
custom_fonts/font = ExtResource( 3 )
text = "Label"
valign = 2
clip_text = true

[node name="Menu" type="MenuButton" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -118.0
margin_top = 2.0
margin_right = -82.0
margin_bottom = 23.0
mouse_filter = 1
theme = ExtResource( 2 )
custom_fonts/font = ExtResource( 3 )
text = "..."
align = 0

[node name="Value" type="LineEdit" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -80.0
margin_top = 2.0
margin_right = -2.0
margin_bottom = 23.0
focus_mode = 1
mouse_filter = 1
theme = ExtResource( 2 )
custom_fonts/font = ExtResource( 3 )
custom_styles/normal = SubResource( 2 )
align = 1

[node name="Slider" type="HSlider" parent="."]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 2.0
margin_top = -16.0
margin_right = -2.0
margin_bottom = 2.0
focus_mode = 1
mouse_filter = 1
theme = ExtResource( 2 )
